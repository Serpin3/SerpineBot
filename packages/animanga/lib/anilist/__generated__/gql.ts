/* eslint-disable */
import * as types from './graphql.js';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  fragment CharacterFields on Character {\n    id\n    name {\n      full\n    }\n    image {\n      large\n    }\n  }\n": types.CharacterFieldsFragmentDoc,
    "\n  fragment CharacterConnectionFields on CharacterConnection {\n    edges {\n      id\n      role\n      voiceActors(language: JAPANESE, sort: [RELEVANCE, ID]) {\n        ...StaffFields\n      }\n      node {\n        ...CharacterFields\n      }\n    }\n  }\n": types.CharacterConnectionFieldsFragmentDoc,
    "\n  fragment MediaTitleFields on MediaTitle {\n    romaji\n    english\n    native\n  }\n": types.MediaTitleFieldsFragmentDoc,
    "\n  fragment MediaConnectionFields on MediaConnection {\n    edges {\n      id\n      relationType(version: 2)\n      node {\n        id\n        type\n        title {\n          ...MediaTitleFields\n        }\n        coverImage {\n          medium\n          large\n          extraLarge\n        }\n        format\n        status(version: 2)\n      }\n    }\n  }\n": types.MediaConnectionFieldsFragmentDoc,
    "\n  fragment RecommendationFields on Recommendation {\n    id\n    rating\n    mediaRecommendation {\n      id\n      title {\n        ...MediaTitleFields\n      }\n      format\n      type\n      status(version: 2)\n      bannerImage\n      coverImage {\n        large\n      }\n    }\n  }\n": types.RecommendationFieldsFragmentDoc,
    "\n  fragment RecommendationConnectionFields on RecommendationConnection {\n    pageInfo {\n      total\n    }\n    nodes {\n      ...RecommendationFields\n    }\n  }\n": types.RecommendationConnectionFieldsFragmentDoc,
    "\n  fragment StaffFields on Staff {\n    id\n    name {\n      full\n    }\n    languageV2\n    image {\n      large\n    }\n  }\n": types.StaffFieldsFragmentDoc,
    "\n  fragment StaffConnectionFields on StaffConnection {\n    edges {\n      id\n      role\n      node {\n        ...StaffFields\n      }\n    }\n  }\n": types.StaffConnectionFieldsFragmentDoc,
    "\n  fragment StudioFields on Studio {\n    id\n    name\n  }\n": types.StudioFieldsFragmentDoc,
    "\n  fragment StudioConnectionFields on StudioConnection {\n    edges {\n      isMain\n      node {\n        ...StudioFields\n      }\n    }\n  }\n": types.StudioConnectionFieldsFragmentDoc,
    "\n  query getMedia($id: Int, $type: MediaType) {\n    Media(id: $id, type: $type) {\n      id\n      idMal\n      title {\n        ...MediaTitleFields\n      }\n      coverImage {\n        medium\n        large\n        extraLarge\n      }\n      bannerImage\n      startDate {\n        year\n        month\n        day\n      }\n      endDate {\n        year\n        month\n        day\n      }\n      description\n      season\n      seasonYear\n      type\n      format\n      status(version: 2)\n      episodes\n      duration\n      chapters\n      volumes\n      genres\n      source(version: 3)\n      isAdult\n      meanScore\n      averageScore\n      popularity\n      countryOfOrigin\n      isLicensed\n      nextAiringEpisode {\n        airingAt\n        timeUntilAiring\n        episode\n      }\n      relations {\n        ...MediaConnectionFields\n      }\n      characters(perPage: 6, sort: [ROLE, RELEVANCE, ID]) {\n        ...CharacterConnectionFields\n      }\n      staff(perPage: 8, sort: [RELEVANCE, ID]) {\n        ...StaffConnectionFields\n      }\n      studios {\n        ...StudioConnectionFields\n      }\n      recommendations(perPage: 10, sort: [RATING_DESC, ID]) {\n        ...RecommendationConnectionFields\n      }\n      externalLinks {\n        id\n        site\n        url\n        type\n        language\n        color\n        icon\n        notes\n        isDisabled\n      }\n      trailer {\n        id\n        site\n      }\n      rankings {\n        id\n        rank\n        type\n        year\n        allTime\n        context\n      }\n      stats {\n        statusDistribution {\n          status\n          amount\n        }\n        scoreDistribution {\n          score\n          amount\n        }\n      }\n    }\n  }\n": types.GetMediaDocument,
    "\n  query getRecommendations($id: Int, $page: Int) {\n    Media(id: $id) {\n      id\n      title {\n        ...MediaTitleFields\n      }\n      recommendations(page: $page, sort: [RATING_DESC, ID]) {\n        pageInfo {\n          total\n          perPage\n          currentPage\n          lastPage\n          hasNextPage\n        }\n        nodes {\n          ...RecommendationFields\n        }\n      }\n    }\n  }\n": types.GetRecommendationsDocument,
    "\n  query getCharacters($id: Int, $page: Int) {\n    Media(id: $id) {\n      id\n      characters(page: $page, sort: [ROLE, RELEVANCE, ID]) {\n        pageInfo {\n          total\n          perPage\n          currentPage\n          lastPage\n          hasNextPage\n        }\n        ...CharacterConnectionFields\n      }\n    }\n  }\n": types.GetCharactersDocument,
    "\n  query getStaff($id: Int, $page: Int) {\n    Media(id: $id) {\n      id\n      staff(page: $page, sort: [RELEVANCE, ID]) {\n        pageInfo {\n          total\n          perPage\n          currentPage\n          lastPage\n          hasNextPage\n        }\n        ...StaffConnectionFields\n      }\n    }\n  }\n": types.GetStaffDocument,
    "\n  query browseMedia (\n    $page: Int,\n    $id: Int,\n    $type: MediaType,\n    $isAdult: Boolean = false,\n    $format: [MediaFormat],\n    $status: MediaStatus,\n    $countryOfOrigin: CountryCode,\n    $source: MediaSource,\n    $season: MediaSeason,\n    $seasonYear: Int,\n    $year: String,\n    $yearLesser: FuzzyDateInt,\n    $yearGreater: FuzzyDateInt,\n    $episodeLesser: Int,\n    $episodeGreater: Int,\n    $durationLesser: Int,\n    $durationGreater: Int,\n    $chapterLesser: Int,\n    $chapterGreater: Int,\n    $volumeLesser: Int,\n    $volumeGreater: Int,\n    $genres: [String],\n    $excludedGenres: [String],\n    $tags: [String],\n    $excludedTags: [String],\n    $sort: [MediaSort] = [POPULARITY_DESC, SCORE_DESC]\n  ) {\n    Page(page: $page, perPage: 50) {\n      pageInfo {\n        total\n        perPage\n        currentPage\n        lastPage\n        hasNextPage\n      }\n      media(\n        id: $id,\n        type: $type,\n        season: $season,\n        format_in: $format,\n        status: $status,\n        countryOfOrigin: $countryOfOrigin,\n        source: $source,\n        seasonYear: $seasonYear,\n        startDate_like: $year,\n        startDate_lesser: $yearLesser,\n        startDate_greater: $yearGreater,\n        episodes_lesser: $episodeLesser,\n        episodes_greater: $episodeGreater,\n        duration_lesser: $durationLesser,\n        duration_greater: $durationGreater,\n        chapters_lesser: $chapterLesser,\n        chapters_greater: $chapterGreater,\n        volumes_lesser: $volumeLesser,\n        volumes_greater: $volumeGreater,\n        genre_in: $genres, genre_not_in:\n        $excludedGenres,\n        tag_in: $tags,\n        tag_not_in: $excludedTags,\n        sort: $sort,\n        isAdult: $isAdult\n      ) {\n        id\n        idMal\n        title {\n          ...MediaTitleFields\n        }\n        coverImage {\n          medium\n          large\n          extraLarge\n        }\n        bannerImage\n        startDate {\n          year\n          month\n          day\n        }\n        endDate {\n          year\n          month\n          day\n        }\n        description\n        season\n        seasonYear\n        type\n        format\n        status(version: 2)\n        episodes\n        duration\n        chapters\n        volumes\n        genres\n        source(version: 3)\n        isAdult\n        meanScore\n        averageScore\n        popularity\n        countryOfOrigin\n        isLicensed\n        nextAiringEpisode {\n          airingAt\n          timeUntilAiring\n          episode\n        }\n        studios {\n          ...StudioConnectionFields\n        }\n        externalLinks {\n          id\n          site\n          url\n          type\n          language\n          color\n          icon\n          notes\n          isDisabled\n        }\n        rankings {\n          id\n          rank\n          type\n          year\n          allTime\n          context\n        }\n      }\n    }\n  }\n": types.BrowseMediaDocument,
    "\n  query getSchedule($page: Int, $start: Int, $end: Int) {\n    Page(page: $page) {\n      pageInfo {\n        hasNextPage\n        total\n      }\n      airingSchedules(airingAt_greater: $start, airingAt_lesser: $end) {\n        id\n        episode\n        airingAt\n        media {\n          id\n          idMal\n          title {\n            ...MediaTitleFields\n          }\n          status\n          season\n          seasonYear\n          type\n          format\n          duration\n          episodes\n          source(version: 2)\n          countryOfOrigin\n          meanScore\n          averageScore\n          description\n          isAdult\n          coverImage {\n            medium\n            large\n            extraLarge\n          }\n          bannerImage\n          externalLinks {\n            type\n            site\n            url\n          }\n          rankings {\n            id\n            rank\n            type\n            year\n            allTime\n            context\n          }\n          studios(isMain: true) {\n            nodes {\n              ...StudioFields\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetScheduleDocument,
    "\n  query search($query: String, $isMature: Boolean) {\n    anime: Page(perPage: 8) {\n      pageInfo {\n        total\n      }\n      results: media(type: ANIME, isAdult: $isMature, search: $query) {\n        id\n        idMal\n        title {\n          ...MediaTitleFields\n        }\n        coverImage {\n          medium\n          large\n          extraLarge\n        }\n        bannerImage\n        season\n        seasonYear\n        isAdult\n        status\n        type\n        format\n        isLicensed\n      }\n    }\n    manga: Page(perPage: 8) {\n      pageInfo {\n        total\n      }\n      results: media(type: MANGA, isAdult: $isMature, search: $query) {\n        id\n        idMal\n        title {\n          ...MediaTitleFields\n        }\n        coverImage {\n          medium\n          large\n          extraLarge\n        }\n        bannerImage\n        startDate {\n          year\n        }\n        isAdult\n        status\n        type\n        format\n        isLicensed\n      }\n    }\n    characters: Page(perPage: 8) {\n      pageInfo {\n        total\n      }\n      results: characters(search: $query) {\n        ...CharacterFields\n      }\n    }\n    staff: Page(perPage: 8) {\n      pageInfo {\n        total\n      }\n      results: staff(search: $query) {\n        ...StaffFields\n      }\n    }\n    studios: Page(perPage: 13) {\n      pageInfo {\n        total\n      }\n      results: studios(search: $query) {\n        ...StudioFields\n      }\n    }\n  }\n\n": types.SearchDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CharacterFields on Character {\n    id\n    name {\n      full\n    }\n    image {\n      large\n    }\n  }\n"): (typeof documents)["\n  fragment CharacterFields on Character {\n    id\n    name {\n      full\n    }\n    image {\n      large\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CharacterConnectionFields on CharacterConnection {\n    edges {\n      id\n      role\n      voiceActors(language: JAPANESE, sort: [RELEVANCE, ID]) {\n        ...StaffFields\n      }\n      node {\n        ...CharacterFields\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CharacterConnectionFields on CharacterConnection {\n    edges {\n      id\n      role\n      voiceActors(language: JAPANESE, sort: [RELEVANCE, ID]) {\n        ...StaffFields\n      }\n      node {\n        ...CharacterFields\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment MediaTitleFields on MediaTitle {\n    romaji\n    english\n    native\n  }\n"): (typeof documents)["\n  fragment MediaTitleFields on MediaTitle {\n    romaji\n    english\n    native\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment MediaConnectionFields on MediaConnection {\n    edges {\n      id\n      relationType(version: 2)\n      node {\n        id\n        type\n        title {\n          ...MediaTitleFields\n        }\n        coverImage {\n          medium\n          large\n          extraLarge\n        }\n        format\n        status(version: 2)\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment MediaConnectionFields on MediaConnection {\n    edges {\n      id\n      relationType(version: 2)\n      node {\n        id\n        type\n        title {\n          ...MediaTitleFields\n        }\n        coverImage {\n          medium\n          large\n          extraLarge\n        }\n        format\n        status(version: 2)\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment RecommendationFields on Recommendation {\n    id\n    rating\n    mediaRecommendation {\n      id\n      title {\n        ...MediaTitleFields\n      }\n      format\n      type\n      status(version: 2)\n      bannerImage\n      coverImage {\n        large\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment RecommendationFields on Recommendation {\n    id\n    rating\n    mediaRecommendation {\n      id\n      title {\n        ...MediaTitleFields\n      }\n      format\n      type\n      status(version: 2)\n      bannerImage\n      coverImage {\n        large\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment RecommendationConnectionFields on RecommendationConnection {\n    pageInfo {\n      total\n    }\n    nodes {\n      ...RecommendationFields\n    }\n  }\n"): (typeof documents)["\n  fragment RecommendationConnectionFields on RecommendationConnection {\n    pageInfo {\n      total\n    }\n    nodes {\n      ...RecommendationFields\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment StaffFields on Staff {\n    id\n    name {\n      full\n    }\n    languageV2\n    image {\n      large\n    }\n  }\n"): (typeof documents)["\n  fragment StaffFields on Staff {\n    id\n    name {\n      full\n    }\n    languageV2\n    image {\n      large\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment StaffConnectionFields on StaffConnection {\n    edges {\n      id\n      role\n      node {\n        ...StaffFields\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment StaffConnectionFields on StaffConnection {\n    edges {\n      id\n      role\n      node {\n        ...StaffFields\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment StudioFields on Studio {\n    id\n    name\n  }\n"): (typeof documents)["\n  fragment StudioFields on Studio {\n    id\n    name\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment StudioConnectionFields on StudioConnection {\n    edges {\n      isMain\n      node {\n        ...StudioFields\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment StudioConnectionFields on StudioConnection {\n    edges {\n      isMain\n      node {\n        ...StudioFields\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getMedia($id: Int, $type: MediaType) {\n    Media(id: $id, type: $type) {\n      id\n      idMal\n      title {\n        ...MediaTitleFields\n      }\n      coverImage {\n        medium\n        large\n        extraLarge\n      }\n      bannerImage\n      startDate {\n        year\n        month\n        day\n      }\n      endDate {\n        year\n        month\n        day\n      }\n      description\n      season\n      seasonYear\n      type\n      format\n      status(version: 2)\n      episodes\n      duration\n      chapters\n      volumes\n      genres\n      source(version: 3)\n      isAdult\n      meanScore\n      averageScore\n      popularity\n      countryOfOrigin\n      isLicensed\n      nextAiringEpisode {\n        airingAt\n        timeUntilAiring\n        episode\n      }\n      relations {\n        ...MediaConnectionFields\n      }\n      characters(perPage: 6, sort: [ROLE, RELEVANCE, ID]) {\n        ...CharacterConnectionFields\n      }\n      staff(perPage: 8, sort: [RELEVANCE, ID]) {\n        ...StaffConnectionFields\n      }\n      studios {\n        ...StudioConnectionFields\n      }\n      recommendations(perPage: 10, sort: [RATING_DESC, ID]) {\n        ...RecommendationConnectionFields\n      }\n      externalLinks {\n        id\n        site\n        url\n        type\n        language\n        color\n        icon\n        notes\n        isDisabled\n      }\n      trailer {\n        id\n        site\n      }\n      rankings {\n        id\n        rank\n        type\n        year\n        allTime\n        context\n      }\n      stats {\n        statusDistribution {\n          status\n          amount\n        }\n        scoreDistribution {\n          score\n          amount\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getMedia($id: Int, $type: MediaType) {\n    Media(id: $id, type: $type) {\n      id\n      idMal\n      title {\n        ...MediaTitleFields\n      }\n      coverImage {\n        medium\n        large\n        extraLarge\n      }\n      bannerImage\n      startDate {\n        year\n        month\n        day\n      }\n      endDate {\n        year\n        month\n        day\n      }\n      description\n      season\n      seasonYear\n      type\n      format\n      status(version: 2)\n      episodes\n      duration\n      chapters\n      volumes\n      genres\n      source(version: 3)\n      isAdult\n      meanScore\n      averageScore\n      popularity\n      countryOfOrigin\n      isLicensed\n      nextAiringEpisode {\n        airingAt\n        timeUntilAiring\n        episode\n      }\n      relations {\n        ...MediaConnectionFields\n      }\n      characters(perPage: 6, sort: [ROLE, RELEVANCE, ID]) {\n        ...CharacterConnectionFields\n      }\n      staff(perPage: 8, sort: [RELEVANCE, ID]) {\n        ...StaffConnectionFields\n      }\n      studios {\n        ...StudioConnectionFields\n      }\n      recommendations(perPage: 10, sort: [RATING_DESC, ID]) {\n        ...RecommendationConnectionFields\n      }\n      externalLinks {\n        id\n        site\n        url\n        type\n        language\n        color\n        icon\n        notes\n        isDisabled\n      }\n      trailer {\n        id\n        site\n      }\n      rankings {\n        id\n        rank\n        type\n        year\n        allTime\n        context\n      }\n      stats {\n        statusDistribution {\n          status\n          amount\n        }\n        scoreDistribution {\n          score\n          amount\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getRecommendations($id: Int, $page: Int) {\n    Media(id: $id) {\n      id\n      title {\n        ...MediaTitleFields\n      }\n      recommendations(page: $page, sort: [RATING_DESC, ID]) {\n        pageInfo {\n          total\n          perPage\n          currentPage\n          lastPage\n          hasNextPage\n        }\n        nodes {\n          ...RecommendationFields\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getRecommendations($id: Int, $page: Int) {\n    Media(id: $id) {\n      id\n      title {\n        ...MediaTitleFields\n      }\n      recommendations(page: $page, sort: [RATING_DESC, ID]) {\n        pageInfo {\n          total\n          perPage\n          currentPage\n          lastPage\n          hasNextPage\n        }\n        nodes {\n          ...RecommendationFields\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCharacters($id: Int, $page: Int) {\n    Media(id: $id) {\n      id\n      characters(page: $page, sort: [ROLE, RELEVANCE, ID]) {\n        pageInfo {\n          total\n          perPage\n          currentPage\n          lastPage\n          hasNextPage\n        }\n        ...CharacterConnectionFields\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCharacters($id: Int, $page: Int) {\n    Media(id: $id) {\n      id\n      characters(page: $page, sort: [ROLE, RELEVANCE, ID]) {\n        pageInfo {\n          total\n          perPage\n          currentPage\n          lastPage\n          hasNextPage\n        }\n        ...CharacterConnectionFields\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getStaff($id: Int, $page: Int) {\n    Media(id: $id) {\n      id\n      staff(page: $page, sort: [RELEVANCE, ID]) {\n        pageInfo {\n          total\n          perPage\n          currentPage\n          lastPage\n          hasNextPage\n        }\n        ...StaffConnectionFields\n      }\n    }\n  }\n"): (typeof documents)["\n  query getStaff($id: Int, $page: Int) {\n    Media(id: $id) {\n      id\n      staff(page: $page, sort: [RELEVANCE, ID]) {\n        pageInfo {\n          total\n          perPage\n          currentPage\n          lastPage\n          hasNextPage\n        }\n        ...StaffConnectionFields\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query browseMedia (\n    $page: Int,\n    $id: Int,\n    $type: MediaType,\n    $isAdult: Boolean = false,\n    $format: [MediaFormat],\n    $status: MediaStatus,\n    $countryOfOrigin: CountryCode,\n    $source: MediaSource,\n    $season: MediaSeason,\n    $seasonYear: Int,\n    $year: String,\n    $yearLesser: FuzzyDateInt,\n    $yearGreater: FuzzyDateInt,\n    $episodeLesser: Int,\n    $episodeGreater: Int,\n    $durationLesser: Int,\n    $durationGreater: Int,\n    $chapterLesser: Int,\n    $chapterGreater: Int,\n    $volumeLesser: Int,\n    $volumeGreater: Int,\n    $genres: [String],\n    $excludedGenres: [String],\n    $tags: [String],\n    $excludedTags: [String],\n    $sort: [MediaSort] = [POPULARITY_DESC, SCORE_DESC]\n  ) {\n    Page(page: $page, perPage: 50) {\n      pageInfo {\n        total\n        perPage\n        currentPage\n        lastPage\n        hasNextPage\n      }\n      media(\n        id: $id,\n        type: $type,\n        season: $season,\n        format_in: $format,\n        status: $status,\n        countryOfOrigin: $countryOfOrigin,\n        source: $source,\n        seasonYear: $seasonYear,\n        startDate_like: $year,\n        startDate_lesser: $yearLesser,\n        startDate_greater: $yearGreater,\n        episodes_lesser: $episodeLesser,\n        episodes_greater: $episodeGreater,\n        duration_lesser: $durationLesser,\n        duration_greater: $durationGreater,\n        chapters_lesser: $chapterLesser,\n        chapters_greater: $chapterGreater,\n        volumes_lesser: $volumeLesser,\n        volumes_greater: $volumeGreater,\n        genre_in: $genres, genre_not_in:\n        $excludedGenres,\n        tag_in: $tags,\n        tag_not_in: $excludedTags,\n        sort: $sort,\n        isAdult: $isAdult\n      ) {\n        id\n        idMal\n        title {\n          ...MediaTitleFields\n        }\n        coverImage {\n          medium\n          large\n          extraLarge\n        }\n        bannerImage\n        startDate {\n          year\n          month\n          day\n        }\n        endDate {\n          year\n          month\n          day\n        }\n        description\n        season\n        seasonYear\n        type\n        format\n        status(version: 2)\n        episodes\n        duration\n        chapters\n        volumes\n        genres\n        source(version: 3)\n        isAdult\n        meanScore\n        averageScore\n        popularity\n        countryOfOrigin\n        isLicensed\n        nextAiringEpisode {\n          airingAt\n          timeUntilAiring\n          episode\n        }\n        studios {\n          ...StudioConnectionFields\n        }\n        externalLinks {\n          id\n          site\n          url\n          type\n          language\n          color\n          icon\n          notes\n          isDisabled\n        }\n        rankings {\n          id\n          rank\n          type\n          year\n          allTime\n          context\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query browseMedia (\n    $page: Int,\n    $id: Int,\n    $type: MediaType,\n    $isAdult: Boolean = false,\n    $format: [MediaFormat],\n    $status: MediaStatus,\n    $countryOfOrigin: CountryCode,\n    $source: MediaSource,\n    $season: MediaSeason,\n    $seasonYear: Int,\n    $year: String,\n    $yearLesser: FuzzyDateInt,\n    $yearGreater: FuzzyDateInt,\n    $episodeLesser: Int,\n    $episodeGreater: Int,\n    $durationLesser: Int,\n    $durationGreater: Int,\n    $chapterLesser: Int,\n    $chapterGreater: Int,\n    $volumeLesser: Int,\n    $volumeGreater: Int,\n    $genres: [String],\n    $excludedGenres: [String],\n    $tags: [String],\n    $excludedTags: [String],\n    $sort: [MediaSort] = [POPULARITY_DESC, SCORE_DESC]\n  ) {\n    Page(page: $page, perPage: 50) {\n      pageInfo {\n        total\n        perPage\n        currentPage\n        lastPage\n        hasNextPage\n      }\n      media(\n        id: $id,\n        type: $type,\n        season: $season,\n        format_in: $format,\n        status: $status,\n        countryOfOrigin: $countryOfOrigin,\n        source: $source,\n        seasonYear: $seasonYear,\n        startDate_like: $year,\n        startDate_lesser: $yearLesser,\n        startDate_greater: $yearGreater,\n        episodes_lesser: $episodeLesser,\n        episodes_greater: $episodeGreater,\n        duration_lesser: $durationLesser,\n        duration_greater: $durationGreater,\n        chapters_lesser: $chapterLesser,\n        chapters_greater: $chapterGreater,\n        volumes_lesser: $volumeLesser,\n        volumes_greater: $volumeGreater,\n        genre_in: $genres, genre_not_in:\n        $excludedGenres,\n        tag_in: $tags,\n        tag_not_in: $excludedTags,\n        sort: $sort,\n        isAdult: $isAdult\n      ) {\n        id\n        idMal\n        title {\n          ...MediaTitleFields\n        }\n        coverImage {\n          medium\n          large\n          extraLarge\n        }\n        bannerImage\n        startDate {\n          year\n          month\n          day\n        }\n        endDate {\n          year\n          month\n          day\n        }\n        description\n        season\n        seasonYear\n        type\n        format\n        status(version: 2)\n        episodes\n        duration\n        chapters\n        volumes\n        genres\n        source(version: 3)\n        isAdult\n        meanScore\n        averageScore\n        popularity\n        countryOfOrigin\n        isLicensed\n        nextAiringEpisode {\n          airingAt\n          timeUntilAiring\n          episode\n        }\n        studios {\n          ...StudioConnectionFields\n        }\n        externalLinks {\n          id\n          site\n          url\n          type\n          language\n          color\n          icon\n          notes\n          isDisabled\n        }\n        rankings {\n          id\n          rank\n          type\n          year\n          allTime\n          context\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getSchedule($page: Int, $start: Int, $end: Int) {\n    Page(page: $page) {\n      pageInfo {\n        hasNextPage\n        total\n      }\n      airingSchedules(airingAt_greater: $start, airingAt_lesser: $end) {\n        id\n        episode\n        airingAt\n        media {\n          id\n          idMal\n          title {\n            ...MediaTitleFields\n          }\n          status\n          season\n          seasonYear\n          type\n          format\n          duration\n          episodes\n          source(version: 2)\n          countryOfOrigin\n          meanScore\n          averageScore\n          description\n          isAdult\n          coverImage {\n            medium\n            large\n            extraLarge\n          }\n          bannerImage\n          externalLinks {\n            type\n            site\n            url\n          }\n          rankings {\n            id\n            rank\n            type\n            year\n            allTime\n            context\n          }\n          studios(isMain: true) {\n            nodes {\n              ...StudioFields\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getSchedule($page: Int, $start: Int, $end: Int) {\n    Page(page: $page) {\n      pageInfo {\n        hasNextPage\n        total\n      }\n      airingSchedules(airingAt_greater: $start, airingAt_lesser: $end) {\n        id\n        episode\n        airingAt\n        media {\n          id\n          idMal\n          title {\n            ...MediaTitleFields\n          }\n          status\n          season\n          seasonYear\n          type\n          format\n          duration\n          episodes\n          source(version: 2)\n          countryOfOrigin\n          meanScore\n          averageScore\n          description\n          isAdult\n          coverImage {\n            medium\n            large\n            extraLarge\n          }\n          bannerImage\n          externalLinks {\n            type\n            site\n            url\n          }\n          rankings {\n            id\n            rank\n            type\n            year\n            allTime\n            context\n          }\n          studios(isMain: true) {\n            nodes {\n              ...StudioFields\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query search($query: String, $isMature: Boolean) {\n    anime: Page(perPage: 8) {\n      pageInfo {\n        total\n      }\n      results: media(type: ANIME, isAdult: $isMature, search: $query) {\n        id\n        idMal\n        title {\n          ...MediaTitleFields\n        }\n        coverImage {\n          medium\n          large\n          extraLarge\n        }\n        bannerImage\n        season\n        seasonYear\n        isAdult\n        status\n        type\n        format\n        isLicensed\n      }\n    }\n    manga: Page(perPage: 8) {\n      pageInfo {\n        total\n      }\n      results: media(type: MANGA, isAdult: $isMature, search: $query) {\n        id\n        idMal\n        title {\n          ...MediaTitleFields\n        }\n        coverImage {\n          medium\n          large\n          extraLarge\n        }\n        bannerImage\n        startDate {\n          year\n        }\n        isAdult\n        status\n        type\n        format\n        isLicensed\n      }\n    }\n    characters: Page(perPage: 8) {\n      pageInfo {\n        total\n      }\n      results: characters(search: $query) {\n        ...CharacterFields\n      }\n    }\n    staff: Page(perPage: 8) {\n      pageInfo {\n        total\n      }\n      results: staff(search: $query) {\n        ...StaffFields\n      }\n    }\n    studios: Page(perPage: 13) {\n      pageInfo {\n        total\n      }\n      results: studios(search: $query) {\n        ...StudioFields\n      }\n    }\n  }\n\n"): (typeof documents)["\n  query search($query: String, $isMature: Boolean) {\n    anime: Page(perPage: 8) {\n      pageInfo {\n        total\n      }\n      results: media(type: ANIME, isAdult: $isMature, search: $query) {\n        id\n        idMal\n        title {\n          ...MediaTitleFields\n        }\n        coverImage {\n          medium\n          large\n          extraLarge\n        }\n        bannerImage\n        season\n        seasonYear\n        isAdult\n        status\n        type\n        format\n        isLicensed\n      }\n    }\n    manga: Page(perPage: 8) {\n      pageInfo {\n        total\n      }\n      results: media(type: MANGA, isAdult: $isMature, search: $query) {\n        id\n        idMal\n        title {\n          ...MediaTitleFields\n        }\n        coverImage {\n          medium\n          large\n          extraLarge\n        }\n        bannerImage\n        startDate {\n          year\n        }\n        isAdult\n        status\n        type\n        format\n        isLicensed\n      }\n    }\n    characters: Page(perPage: 8) {\n      pageInfo {\n        total\n      }\n      results: characters(search: $query) {\n        ...CharacterFields\n      }\n    }\n    staff: Page(perPage: 8) {\n      pageInfo {\n        total\n      }\n      results: staff(search: $query) {\n        ...StaffFields\n      }\n    }\n    studios: Page(perPage: 13) {\n      pageInfo {\n        total\n      }\n      results: studios(search: $query) {\n        ...StudioFields\n      }\n    }\n  }\n\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;