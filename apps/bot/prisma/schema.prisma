generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-1.1.x"]
    output        = "./__generated__"
}

datasource db {
    provider = "mongodb"
    url      = env("SB_SERVICES__MONGODB__URI")
}

enum FeedType {
    ANIME
    BIRTHDAYS
    EVENTS
    FREEBIES
    LEADERBOARDS
    MANGA
    REDDIT
    REVIEWS
    RSS
}

model Birthday {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @unique
    day       Int
    month     Int
    year      Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("birthdays")
}

model Reminder {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String
    timeStart DateTime
    timeEnd   DateTime
    message   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("reminders")
}

type XboxRecentlyPlayedEntry {
    id                String
    title             String
    weeklyGamerscore  Int
    currentGamerscore Int
    totalGamerscore   Int
}

type XboxProfile {
    id       String
    gamertag String
}

model Xbox {
    id             String                    @id @default(auto()) @map("_id") @db.ObjectId
    userId         String                    @unique
    profile        XboxProfile
    recentlyPlayed XboxRecentlyPlayedEntry[]
    createdAt      DateTime                  @default(now())
    updatedAt      DateTime                  @updatedAt

    @@map("xbox")
}

type SteamRecentlyPlayedEntry {
    id            String
    title         String
    url           String
    weeklyHours   Float
    biweeklyHours Float
    totalHours    Float
}

type SteamWishlistNotification {
    sale    Boolean
    release Boolean
}

type SteamWishlistEntry {
    id            String
    title         String
    url           String
    priority      Int
    discount      Int?
    regular       Float?
    discounted    Float?
    isFree        Boolean
    isReleased    Boolean
    onSale        Boolean
    subscriptions String[]
    notified      SteamWishlistNotification
}

type SteamProfile {
    id  String
    url String
}

model Steam {
    id             String                     @id @default(auto()) @map("_id") @db.ObjectId
    userId         String                     @unique
    profile        SteamProfile
    wishlist       SteamWishlistEntry[]
    recentlyPlayed SteamRecentlyPlayedEntry[]
    notifications  Boolean                    @default(true)
    createdAt      DateTime                   @default(now())
    updatedAt      DateTime                   @updatedAt

    @@map("steam")
}

type Roles {
    channelId String?
    options   String[]
}

type Webhook {
    id    String
    token String
}

model Guild {
    id        String   @id @map("_id")
    roles     Roles
    locale    String   @default("en-US")
    timezone  String   @default("utc")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("guilds")
}

type Image {
    external Boolean
    selector String
}

type Options {
    sort   String
    flairs String[]
    limit  Int
    image  Image
}

type Cache {
    enabled Boolean
    fields  String[]
}

type Feed {
    guildId   String
    channelId String
    webhook   Webhook
    feed      String
    options   Options
    cache     Cache
}

model Feeds {
    type      FeedType @id @map("_id")
    feeds     Feed[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("feeds")
}

type CatalogEntry {
    title String
    slug  String
    url   String?
}

type CatalogSelectorPagination {
    root  String?
    nth   Int
    total String?
    prev  String?
    next  String
}

type CatalogSelectorListUrl {
    base String?
    href String?
}

type CatalogSelectorListItem {
    name String
    url  CatalogSelectorListUrl
}

type CatalogSelectorList {
    root String
    item CatalogSelectorListItem
}

type CatalogSelectors {
    list       CatalogSelectorList
    pagination CatalogSelectorPagination
    cookies    String?
    region     String?
}

model Subscription {
    id        String           @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    url       String
    selectors CatalogSelectors
    entries   CatalogEntry[]
    count     Int
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt

    @@map("subscriptions")
}
