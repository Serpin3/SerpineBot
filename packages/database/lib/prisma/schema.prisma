generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

enum CatalogType {
  XBOX_GAME_PASS
  PC_GAME_PASS
  UBISOFT_PLUS
  EA_PLAY_PRO
  EA_PLAY
}

enum WebhookType {
  GAMING_NEWS
  GAME_REVIEWS
  GAME_DEALS
  FREE_GAMES
  XBOX
  PLAYSTATION
  NINTENDO
  BIRTHDAYS
  LEADERBOARDS
  EVENTS
  NSFW
  MEMES
  ANIME
  MANGA
}

model Birthday {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique
  day       Int
  month     Int
  year      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("birthdays")
}

model Reminder {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  timeStart DateTime
  timeEnd   DateTime
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reminders")
}

type XboxProfile {
  gamertag   String
  gamerscore Int
}

model Xbox {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @unique
  profile   XboxProfile
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("xbox")
}

type SteamRecentlyPlayedEntry {
  id            String
  title         String
  url           String
  weeklyHours   Float
  biweeklyHours Float
  totalHours    Float
}

type SteamWishlistEntry {
  id            String
  title         String
  url           String
  priority      Int
  discount      Int?
  regular       String?
  discounted    String?
  isFree        Boolean
  isReleased    Boolean
  onSale        Boolean
  subscriptions CatalogType[]
  notified      Boolean       @default(false)
}

type SteamProfile {
  id  String
  url String
}

model Steam {
  id             String                     @id @default(auto()) @map("_id") @db.ObjectId
  userId         String                     @unique
  profile        SteamProfile
  wishlist       SteamWishlistEntry[]
  recentlyPlayed SteamRecentlyPlayedEntry[]
  notifications  Boolean                    @default(true)
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt

  @@map("steam")
}

type Roles {
  channelId String?
  options   String[]
}

type Webhook {
  type  WebhookType
  id    String
  name  String
  token String
}

model Guild {
  id        String    @id @map("_id")
  roles     Roles
  webhooks  Webhook[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("guilds")
}

type CatalogItem {
  title String
  slug  String
  url   String?
}

model Subscription {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  type      CatalogType   @unique
  name      String
  catalog   CatalogItem[]
  count     Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("subscriptions")
}

type Image {
  isExternal Boolean @default(false)
  selector   String
}

type Options {
  image Image
}

type Feed {
  url     String
  options Options?
}

model Rss {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  webhook   WebhookType @unique
  feeds     Feed[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("rss")
}
